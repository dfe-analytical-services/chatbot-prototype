name: 'Chatbot Prototype CI Pipeline'

trigger:
  - main
pr: none

variables:
  pnpm_config_cache: $(Pipeline.Workspace)/.pnpm-store

jobs:
- job: 'chatbot_ui'
  pool:
    vmImage: ubuntu-latest
  displayName: 'Create Chatbot UI Artifact'
  steps:
    - template: templates/pnpm-steps.yaml

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/chatbot-ui'
        ## TODO: Be smarter about what we copy. atm leaving this blank copies the entire folder
        ## We can do this by moving the deployable files into a src folder
        ## content: src/
        targetFolder: '$(Build.ArtifactStagingDirectory)/ChatbotUI'
      displayName: 'Copy Chatbot UI files'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: ChatbotUI
        targetPath: '$(Build.ArtifactStagingDirectory)/ChatbotUI'
        publishLocation: 'pipeline'
      displayName: 'Publish Chatbot UI artifact'
        
- job: 'data_ingestion_api'
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      Python311:
        python.version: '3.11'
  displayName: 'Create Data Ingestion API Artifact'
  steps:
    - template: templates/python-steps.yaml

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/data_ingestion'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/DataIngestionAPI$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: # (no value); this input is optional

    - publish: $(Build.ArtifactStagingDirectory)/DataIngestionAPI$(Build.BuildId).zip
      displayName: 'Upload Data Ingestion API'
      artifact: DataIngestionAPI

- job: 'response_automater_api'
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      Python311:
        python.version: '3.11'
  displayName: 'Create Response Automater API Artifact'
  steps:
    - template: templates/python-steps.yaml

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/response_automater'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/ResponseAutomaterAPI/ResponseAutomaterAPI$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: # (no value); this input is optional

    - publish: $(Build.ArtifactStagingDirectory)/ResponseAutomaterAPI/ResponseAutomaterAPI$(Build.BuildId).zip
      displayName: 'Upload Response Automater'
      artifact: ResponseAutomaterAPI


